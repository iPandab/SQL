--数据库的定义与删除
--数据库的定义
--例3.1 定义一个SQL数据库
CREATE DATABASE SaleProduct

--数据库的删除
--例3.2 删除SQL数据库SaleProduct
--DROP DATABASE SaleProduct

--基本表的定义、删除与修改
--基本表的定义
--例3.3 创建客户表Customer
CREATE TABLE Customer(
custID varchar(5) PRIMARY KEY,
custName varchar(20) NOT NULL UNIQUE,
custCity varchar(10),
custPhone varchar(13))
/*常用完整性约束
NULL INOT NULL:该列值可以为空，或者不能为空。
UNIQUE:唯一性约束，说明该列取值必须唯一。
PRIMARY KEY:主码约束，说明该列为基本表的主码。
FOREIGN KEY:外码约束，说明表之间的参照关系。
CHECK:域完整性约束，说明该列的取值需要满足的约束条件。
DEFAULT:默认值设置，表示该列在未定义时的默认取值。*/

--例3.3 也可为约束命名
/*CREATE TABLE Customer(
custID varchar(5) constraint PK_Customer PRIMARY KEY,
custName varchar(20) NOT NULL constraint UQ_Customer UNIQUE,
custCity varchar(10),
custPHONE varchar(13))*/

--例3.4 创建商品表Product.
CREATE TABLE Product(
pdID varchar(5) constraint PK_Product PRIMARY KEY,
pdName varchar(20) NOT NULL,
pdSpec varchar(10),
pdModel varchar(10),
pdSupplier varchar(20) NOT NULL,
pdPrice numeric(10,2) DEFAULT 0 CHECK (pdPrice>=0),
pdStockSize int DEFAULT 0 CHECK (pdStockSize>=0))

--例3.5 创建订单表Orders
CREATE TABLE Orders(
orderID varchar(16) PRIMARY KEY,
orderDate date NOT NULL,
custID varchar(5) NOT NULL
FOREIGN KEY REFERENCES 
Customer(custID)
ON DELETE cascade
ON UPDATE cascade,
orderAddress varchar(40) NOT NULL,
orderAmount numeric(10,2) NOT NULL)
/*外码除了级联CASCADE之外，还可以选择如下处理方式。
NO ACTION:说明禁止删除或更新被参照记录，这也是默认的处理方式。
SET NULL:说明将参照记录的对应属性列值设置为空值NULL。
SET DEFAULT:说明将参照记录的对应属性列值设置为默认值。*/

--例3.5 外码约束还可以定义成表级约束
CREATE TABLE Orders(
orderID varchar( 16) PRIMARY KEY,
orderDate date NOT NULL,
custID varchar(5) NOT NULL,
orderAddress varchar(40) NOT NULL,
orderAmount numeric(10,2) NOT NULL,
FOREIGN KEY (custID) REFERENCES Customer(custID)
ON DELETE cascade
ON UPDATE cascade)

--例3.6 创建订单明细表OrderDetail
CREATE TABLE OrderDetail(
orderID varchar(16) NOT NULL,
pdID varchar(5) NOT NULL,
pdSellPrice numeric(10, 2) NOT NULL,
quantity int NOT NULL,
PRIMARY KEY (orderID,pdID),
FOREIGN KEY (orderID) REFERENCES Orders (orderID),
FOREIGN KEY (pdID) REFERENCES Product (pdID)
ON UPDATE cascade)

--基本表的修改
--例3.7 将Product表中的属性列pdName的数据类型改为varchar(30)
ALTER TABLE Product
ALTER COLUMN pdName varchar(30)
--更改某些数据类型可能导致相关数据自动更改

--例3.8 将Product表中的属性列pdName的数据类型改为varchar(2)
ALTER TABLE Product
ALTER COLUMN pdName varchar(2)
--语句操作就会中止，原因在于“将截断字符串或二进制数据”

--例3.9 在Product表中增加一个列:pdMemo(备注)，数据类型为varchar(100)
ALTER TABLE Product
ADD pdMemo varchar(100)

--例3.10 在Customer表中增加默认值约束:custCity(所在城市)，其默认值为“北京”
ALTER TABLE Customer
ADD CONSTRAINT DF_custCity
DEFAULT '北京' for custCity

--例3.11 除Customert表中的完整性约束值RDF_custCity
ALTER TABLE Customer
DROP CONSTRAINT DF_custCity

--基本表的删除
--例3.12 删除OrderDetail表
--DROP TABLE OrderDetail

--例3.13 在Customer表的属性列custPhone上创建一个唯一索引
CREATE UNIQUE INDEX idx_uq_custPhone
on Customer(custPhone)

--例3.14 删除Customert表的索引idx_uq_custPhone
DROP INDEX idx_uq_custPhone ON Customer

--例3.15 向客户表中插入一个客户记录('907','林巍','北京','17705678942')
INSERT INTO Customer
VALUES ('907','林巍','北京','17705678942')
--说明:列名序列省略，则表示在VALUES后的元组值中提供插入元组的每个分量的值，分量的顺序和关系模式中列名的顺序一致。




INSERT INTO Customer
VALUES ('901','里奇','北京','13844472365')
INSERT INTO Customer
VALUES('902','环宇','北京','18955532012')
INSERT INTO Customer
VALUES('903','张松林','上海','13677712316')
INSERT INTO Customer
VALUES('905','贾立委','广州','15985612316')
INSERT INTO Customer
VALUES('906','张小宁','','')

INSERT INTO Product
VALUES('11203','羽毛球','10只装','YM-11','上海双喜','20.00','500')
INSERT INTO Orders
VALUES('11205','羽毛球','','','','','')
INSERT INTO Orders
VALUES('11206','篮球','','','','','')
INSERT INTO Orders
VALUES('11207','篮球','','','','','')
INSERT INTO Orders
VALUES('11208','篮球','','','','','')
INSERT INTO Orders
VALUES('11209','足球','','','','','')
INSERT INTO Orders
VALUES('11210','足球','','','','','')
INSERT INTO Orders
VALUES('11201','羽毛球拍','','','','','')
INSERT INTO Orders
VALUES('11202','羽毛球拍','','','','','')




INSERT INTO Orders
VALUES('D01005161628001','2010-05-16','901','北京市朝阳区英雄联盟小区9号楼','6750.00')
INSERT INTO Orders
VALUES('D201005171630002','2010-05-17','903','上海市虹梅路201号','1232.00')
INSERT INTO Orders
VALUES('D201006060923003','2010-06-06','905','广州市江南大道中82号','2500.00')
INSERT INTO Orders
VALUES('D201006101528004','2010-06-10','901','北京市海淀区光华路55号','6200.00')
INSERT INTO Orders
VALUES('D201007010916005','2010-07-01','902','北京市北四环中路35号','1425.00')




--例3.16 向客户表中插入一个客户记录('905','王力','大连','15903541236').
--INSERT INTO Customer
--VALUES ('905','王力','大连','15903541236')
--运行结果:操作失败
--分析原因:违反了PRIMARY KEY约束

--例3.17 向客户表中插入一个客户记录,客户编号为“904”,客户名称为“张松林”
--INSERT INTO Customer(custID,custName)
--VALUES ('904','张松林')
--运行结果:操作失败
--分析原因:违反了UNIQUE约束

--例3.18 在订单明细表OrderDetail中插入一个订单明细记录('D201508201002006','11205', 47,2)
--INSERT INTO OrderDetail
--VALUES('D201508201002006','11205',47,2)
--运行结果:操作失败
--分析原因:违反了FOREIGN KEY约束

--例3.19 删除Customer中客户名称为“张小宁”的客户的基本信息
DELETE FROM Customer
WHERE custName= '张小宁'

--例3.20 删除Product中商品编号为“11206” 的商品信息
DELETE FROM Product
WHERE pdID='11206'
--运行结果:操作失败
--违反参照引用关系

--例3.21 将客户名称为“里奇”的所在城市改为“深圳”
UPDATE Customer
SET custCity ='深圳'
WHERE custName='里奇'

--例3.22 将商品表中所有商品的价格调高10%
UPDATE Product
SET pdPrice=pdPrice*1.1

--例3.23 将客户表中客户编号为“902”的客户编号改为“910”
UPDATE Customer
SET custID='910'
WHERE custID='902'
--运行结果: Customer中客户 编号为“902” 的客户编号成功改为“910”。
--同时订单表Orders中所有引用“902”的元组的custID也同时更新为“910”。

--例3.24 将订单表中订单编号为“D201007010916005”的订单编号改为“D201007010916009”。
UPDATE Orders
SET orderID = 'D201007010916009'
WHERE orderID = 'D201007010916005'
--运行结果:操作失败
--分析原因:违反参照引用关系

--例3.25 将商品表中商品编号为“11205”的商品编号改为“11210”
UPDATE Product
SET pdID='11210'
WHERE pdID='11205'
--运行结果:操作失败
--分析原因:违反了PRIMARY KEY约束

--简单无条件查询
--例4.1 查询所有客户的基本情况
SELECT custID,custName,custCity,custPhone
FROM Customer
--或者
SELECT *
FROM Customer
--说明:*是一种缺省形式，当所查询的列是关系的所有属性时，可以使用*来表示。

--简单条件查询
--例4.2 查询北京客户的客户编号和客户名称
SELECT 'custID','custName' FROM Customer
WHERE custCity='北京'

--例4.3 查询订单总金额超过5000元的订单信息
SELECT *
FROM Orders
WHERE orderAmount>5000

--使用BETWEEN AND的查询
--例4.4 查询价格在100-500 (包含100和500)之间的商品编号
SELECT pdID FROM Product
WHERE pdPrice BETWEEN 100 AND 500
--相当于
SELECT pdID FROM Product
WHERE pdPrice >= 100 AND pdPrice <= 500

--例4.5 查询价格不在100-500之间的商品编号
SELECT pdID FROM Product
WHERE pdPrice NOT BETWEEN 100 AND 500
--相当于
SELECT pdID FROM Product
WHERE pdPrice <100 AND pdPrice > 500

--例4.6 查询客户“里奇”的联系电话。
SELECT custPhone FROM Customer
WHERE custName LIKE '里奇'
--等价于：
/*SELECT custPhone 
FROM Customer
WHERE custName='里奇'*/
--当‘<字符串常数>’不含有通配符时，可以用=运算符取代LIKE谓词,用!=或<>运算符取代NOT LIKE谓词。

--例4.7 查询所有姓张的客户的基本情况
SELECT *
FROM Customer
WHERE custName LIKE '张%'

--例4.8 查询客户名称第2个字为“立”的客户的基本情况。
SELECT *
FROM Customer
WHERE custName LIKE '立%'

--例4.9 查询所有不姓贾的客户的基本情况。
SELECT *
FROM Customer
WHERE custName NOT LIKE '贾%'

--例4.10 查询所有客户名称以“张”开头的客户的基本情况。
-- 当用户要查询的字符串本身就含有%或_时，要使用ESCAPE'<转义字符>'短语对通配符进行转义。
SELECT *
FROM Customer
WHERE custName LIKE '张\_%' ESCAPE '\'

--空值查询
--例4.11 查询缺少联系电话的客户名单
SELECT custName FROM Customer
WHERE custPhone IS NULL
--例4.12 查询所有有联系电话的客户名单。
SELECT custName FROM Customer
WHERE custPhone IS NOT NULL

--例4.13 查询北京和广州的客户的基本情况。
SELECT *
FROM Customer
WHERE custCity IN ('北京','广州')
--等价于:
SELECT*
FROM Customer
WHERE custCity ='北京' OR custCity='广州'

--例4.14 查询除了北京和广州之外，其余城市的客户的基本情况。
SELECT *
FROM Customer
WHERE custCity NOT IN ('北京','广州')

--例4-16 查询所有客户所在城市。
--不带DISTINCT的语句:
SELECT custCity FROM Customer
--带DISTINCT的语句:
SELECT DISTINCT custCity FROM  Customer
--DISTINCT短语的作用范围是所有目标列，在SELECT子句中只出现一次。
